PACKAGES="nmap-ncat"
BINS="sh ls curl ncat"
EXTRA="/etc/resolv.conf"
DOCKERFILE_IN="Dockerfile.template"
DOCKERFILE_OUT="Dockerfile"

CONTAINER_NAME=ssh-sandbox-builder

container_execute() {
  podman exec $CONTAINER_NAME /bin/sh -c "$1"
}

prepare_container() {
  podman run --detach --rm --name $CONTAINER_NAME alpine sh -c \
    'while true; do sleep 1000; done'
  container_execute "apk add $PACKAGES"
}

destroy_container() {
  podman stop --time 1 $CONTAINER_NAME 2> /dev/null
  podman rm $CONTAINER_NAME
}

extract_libs() {
  for app in $1; do
    container_execute "ldd $app" 
  done | sed 's!^[^/]*\(/[^ ]*\) .*!\1!' | sort -u
}

write_package_installations() {
  echo "RUN apk add $1" >> $DOCKERFILE_OUT
}

write_directory_creations() {
  echo "RUN mkdir -p $(dirname $1 | sort -u | tr "\n" ' ')" \
    | sed 's! /! /chroot/!g' >> $DOCKERFILE_OUT
}

write_file_copies_to_chroot() {
  echo -n $1 | tr ' ' '\0' \
    | xargs --null -I '{}' echo 'RUN cp {} /chroot{}' >> $DOCKERFILE_OUT
}

write_path_modification() {
  echo "ENV PATH=$(echo $1 | tr ' ' ':')" >> $DOCKERFILE_OUT
}

cp $DOCKERFILE_IN $DOCKERFILE_OUT

prepare_container

BINS=$(container_execute "which $BINS")
LIBS=$(extract_libs "$BINS")
FILES=$(echo "$LIBS $BINS $EXTRA" | tr ' ' "\n" | sort -u)

echo -e "\n# autogenerated by SSH Sandbox Builder" >> $DOCKERFILE_OUT

write_package_installations "$PACKAGES"
write_directory_creations "$FILES"
write_file_copies_to_chroot "$FILES"
write_path_modification "$BINS"

destroy_container
